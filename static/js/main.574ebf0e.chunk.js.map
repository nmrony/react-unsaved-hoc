{"version":3,"sources":["components/warnAboutUnsavedState.jsx","components/ContactFormComponent.jsx","components/ContactPage.jsx","components/Home.jsx","components/MainMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["warnAboutUnsavedForm","warnAboutUnsavedState","WrappedComponent","_React$Component","WarnAboutUnsavedChanges","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_promptUnsavedChange","props","dirty","warningMessage","window","onbeforeunload","isUnsaved","length","undefined","_this","react_default","a","createElement","react","Prompt","when","message","location","concat","React","Component","_ref","touched","errors","isSubmitting","formik_esm","className","type","name","placeholder","email","disabled","keys","WifiFormValidationSchema","Yup","shape","required","Contact","initialValues","validationSchema","onSubmit","values","resetForm","setSubmitting","console","log","Fragment","ContactFormComponent","assign","JSON","stringify","Home","MainMenu","role","aria-label","Link","to","App","BrowserRouter","components_MainMenu","Route","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.574ebf0e.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nfunction warnAboutUnsavedForm(WrappedComponent) {\n  return class WarnAboutUnsavedChanges extends React.Component {\n    componentDidUpdate() {\n      this._promptUnsavedChange(this.props.dirty, this.props.warningMessage);\n    }\n\n    componentWillUnmount() {\n      window.onbeforeunload = null;\n    }\n\n    _promptUnsavedChange(isUnsaved = false, warningMessage) {\n      window.onbeforeunload = isUnsaved && (() => warningMessage);\n    }\n\n    render() {\n      return (\n        <Fragment>\n          <WrappedComponent {...this.props} />\n          <Prompt when={this.props.dirty} message={location => `${this.props.warningMessage}`} />\n        </Fragment>\n      );\n    }\n  };\n}\n\nexport default warnAboutUnsavedForm;\n","import { Field, Form } from 'formik';\nimport React from 'react';\nimport warnAboutUnsavedState from './warnAboutUnsavedState';\n\nconst SampleEmailForm = ({ touched, errors, isSubmitting }) => (\n  <Form>\n    <div className=\"field\">\n      <div className=\"control\">\n        <label className=\"label\">Email</label>\n        <Field className=\"input\" type=\"email\" name=\"email\" placeholder=\"email\" />\n        {touched.email && errors.email && <p className=\"help is-danger\">{errors.email}</p>}\n      </div>\n    </div>\n    <div className=\"control\">\n      <br />\n      <button type=\"submit\" className=\"button is-primary\" disabled={!!Object.keys(errors).length || isSubmitting}>\n        Submit\n      </button>\n    </div>\n  </Form>\n);\n\nexport default warnAboutUnsavedState(SampleEmailForm);\n","import { Formik } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport EmailFormWithWarning from './ContactFormComponent';\n\nconst WifiFormValidationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email()\n    .required('email is required')\n});\nconst Contact = () => (\n  <div className=\"section\">\n    <Formik\n      initialValues={{ email: '' }}\n      validationSchema={WifiFormValidationSchema}\n      onSubmit={(values, { resetForm, /*setErrors,*/ setSubmitting }) => {\n        setSubmitting(false);\n        resetForm();\n        console.log('submitted value', values);\n      }}\n    >\n      {props => (\n        <>\n          <EmailFormWithWarning {...props} warningMessage=\"This message is showing from props and i18n friendly\" />\n          <br />\n          <h3>\n            Debug\n            <strong>Debug</strong>\n          </h3>\n          <pre>\n            <strong>Form State: </strong>\n            {JSON.stringify(props, null, 2)}\n          </pre>\n        </>\n      )}\n    </Formik>\n  </div>\n);\n\nexport default Contact;\n","import React from 'react';\n\nexport default function Home() {\n  return (\n    <h1 className=\"section is-centered\">\n      <strong>Hompeage</strong>\n    </h1>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst MainMenu = () => {\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-start\">\n        <Link to=\"/\" className=\"navbar-item\">\n          home\n        </Link>{' '}\n        <Link to=\"/contact\" className=\"navbar-item\">\n          contact\n        </Link>\n      </div>\n    </nav>\n  );\n};\n\nexport default MainMenu;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Contact from './components/ContactPage';\nimport Home from './components/Home';\nimport MainMenu from './components/MainMenu';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <MainMenu />\n          </header>\n          <section className=\"hero is-info\">\n            <div className=\"hero-body has-text-centered\">\n              <div className=\"container\">\n                <h1 className=\"title\">Warn on Dirty</h1>\n              </div>\n            </div>\n          </section>\n          <div>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/contact\" component={Contact} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}