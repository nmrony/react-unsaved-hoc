{"version":3,"sources":["components/ContactFormComponent.jsx","components/WarnAboutUnsaveState.jsx","components/ContactPage.jsx","components/Home.jsx","components/MainMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["SimpleEmailForm","_ref","touched","errors","isSubmitting","react_default","a","createElement","formik_esm","className","type","name","placeholder","email","disabled","Object","keys","length","WarnAboutUnsaveState","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nextLocation","openModal","onCancel","bind","assertThisInitialized","onConfirm","preventReload","_this2","unblock","history","block","when","setState","window","onbeforeunload","navigateToNextLocation","push","pathname","children","React","Component","withRouter","FormikFormValidationSchema","Yup","shape","required","Contact","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","setSubmitting","console","log","Fragment","components_WarnAboutUnsaveState","dirty","isOpen","arguments","undefined","Swal","fire","title","text","showCancelButton","confirmButtonText","cancelButtonText","then","value","showAlert","ContactFormComponent","JSON","stringify","Home","MainMenu","role","aria-label","Link","to","App","BrowserRouter","components_MainMenu","Route","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc8163d8.chunk.js","sourcesContent":["import { Field, Form } from 'formik';\nimport React from 'react';\n\nconst SimpleEmailForm = ({ touched, errors, isSubmitting }) => (\n  <Form>\n    <div className=\"field\">\n      <div className=\"control\">\n        <label className=\"label\">Email</label>\n        <Field className=\"input\" type=\"email\" name=\"email\" placeholder=\"email\" />\n        {touched.email && errors.email && <p className=\"help is-danger\">{errors.email}</p>}\n      </div>\n    </div>\n    <div className=\"control\">\n      <br />\n      <button type=\"submit\" className=\"button is-primary\" disabled={!!Object.keys(errors).length || isSubmitting}>\n        Submit\n      </button>\n    </div>\n  </Form>\n);\n\nexport default SimpleEmailForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass WarnAboutUnsaveState extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { nextLocation: null, openModal: false };\n    this.onCancel = this.onCancel.bind(this);\n    this.onConfirm = this.onConfirm.bind(this);\n    this.preventReload = this.preventReload.bind(this);\n  }\n\n  componentDidMount() {\n    this.unblock = this.props.history.block(nextLocation => {\n      if (this.props.when) {\n        this.setState({\n          openModal: true,\n          nextLocation: nextLocation\n        });\n      }\n      return !this.props.when;\n    });\n  }\n\n  componentDidUpdate() {\n    this.preventReload();\n  }\n\n  componentWillUnmount() {\n    this.unblock();\n    window.onbeforeunload = null;\n  }\n\n  onCancel() {\n    this.setState({ nextLocation: null, openModal: false });\n  }\n\n  onConfirm() {\n    this.navigateToNextLocation();\n  }\n\n  preventReload() {\n    window.onbeforeunload = (this.props.when && (() => true)) || null;\n  }\n\n  navigateToNextLocation() {\n    this.unblock();\n    this.props.history.push(this.state.nextLocation.pathname);\n  }\n\n  render() {\n    return <div>{this.props.children(this.state.openModal, this.onConfirm, this.onCancel)}</div>;\n  }\n}\n\nWarnAboutUnsaveState.propTypes = {\n  when: PropTypes.bool.isRequired,\n  children: PropTypes.func.isRequired\n};\n\nexport default withRouter(WarnAboutUnsaveState);\n","import { Formik } from 'formik';\nimport React from 'react';\nimport Swal from 'sweetalert2';\nimport 'sweetalert2/src/sweetalert2.scss';\nimport * as Yup from 'yup';\nimport SimpleEmailForm from './ContactFormComponent';\nimport WarnAboutUnsaveState from './WarnAboutUnsaveState';\n\nfunction showAlert(onConfirm = () => {}, onCancel = () => {}) {\n  Swal.fire({\n    title: 'Are you sure?',\n    text: 'All your unsaved data will be gone forever.',\n    type: 'warning',\n    showCancelButton: true,\n    confirmButtonText: 'Ok',\n    cancelButtonText: 'Cancel'\n  }).then(({ value }) => (value ? onConfirm() : onCancel()));\n}\n\nconst FormikFormValidationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email()\n    .required('email is required')\n});\nconst Contact = () => (\n  <div className=\"section\">\n    <Formik\n      initialValues={{ email: '' }}\n      validationSchema={FormikFormValidationSchema}\n      onSubmit={(values, { resetForm, /*setErrors,*/ setSubmitting }) => {\n        setSubmitting(false);\n        resetForm();\n        console.log('submitted value', values);\n      }}\n    >\n      {props => (\n        <>\n          {/* <EmailFormWithWarning {...props} warningMessage=\"This message is showing from props and i18n friendly\" /> */}\n          <WarnAboutUnsaveState when={props.dirty}>\n            {(isOpen, onConfirm, onCancel) => {\n              if (isOpen) {\n                showAlert(onConfirm, onCancel);\n              }\n              return <SimpleEmailForm {...props} />;\n            }}\n          </WarnAboutUnsaveState>\n          <br />\n          <h3>\n            <strong>Debug</strong>\n          </h3>\n          <pre>\n            <strong>Form State: </strong>\n            {JSON.stringify(props, null, 2)}\n          </pre>\n        </>\n      )}\n    </Formik>\n  </div>\n);\n\nexport default Contact;\n","import React from 'react';\n\nexport default function Home() {\n  return (\n    <h1 className=\"section is-centered\">\n      <strong>Hompeage</strong>\n    </h1>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst MainMenu = () => {\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-start\">\n        <Link to=\"/\" className=\"navbar-item\">\n          home\n        </Link>{' '}\n        <Link to=\"/contact\" className=\"navbar-item\">\n          contact\n        </Link>\n      </div>\n    </nav>\n  );\n};\n\nexport default MainMenu;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Contact from './components/ContactPage';\nimport Home from './components/Home';\nimport MainMenu from './components/MainMenu';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <MainMenu />\n          </header>\n          <section className=\"hero is-info\">\n            <div className=\"hero-body has-text-centered\">\n              <div className=\"container\">\n                <h1 className=\"title\">Warn on Dirty</h1>\n              </div>\n            </div>\n          </section>\n          <div>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/contact\" component={Contact} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}